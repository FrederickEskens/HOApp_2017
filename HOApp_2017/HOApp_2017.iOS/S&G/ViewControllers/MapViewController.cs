// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Drawing;
using CoreGraphics;
using CoreLocation;
using Foundation;
using Google.Maps;
using HOApp_2017.iOS.SG.ViewControllers.Base;
using MapKit;
using Newtonsoft.Json;
using ObjCRuntime;
using UIKit;

namespace HOApp_2017.iOS
{
    public partial class MapViewController : BaseContentViewController
    {
        public MapViewController(IntPtr handle) : base(handle)
        {
        }
        MKMapView mapView;
        public override void LoadView()
        {
            base.LoadView();
            //// Create a GMSCameraPosition that tells the map to display the
            //// coordinate 37.79,-122.40 at zoom level 6.
            //var camera = CameraPosition.FromCamera(latitude: 51.24230669704754,
            //										longitude: 4.9368953704833980,
            //										zoom: 15);
            //        // camera = mapView.CameraForBounds(new CoordinateBounds(new CoreLocation.CLLocationCoordinate2D(51.2300,4.90900),new CoreLocation.CLLocationCoordinate2D(51.2530, 4.9570)),new UIEdgeInsets());

            //mapView = MapView.FromCamera(CGRect.Empty, camera);
            //mapView.MyLocationEnabled = true;
            ////camera = mapView.CameraForBounds(new CoordinateBounds(new CoreLocation.CLLocationCoordinate2D(51.2300, 4.90900), new CoreLocation.CLLocationCoordinate2D(51.2530, 4.9570)), new UIEdgeInsets());

            ////mapView.Camera = camera;
            //m

            mapView = new MKMapView(View.Bounds);
            mapView.AutoresizingMask = UIViewAutoresizing.FlexibleDimensions;

            CLLocationCoordinate2D coords = new CLLocationCoordinate2D(51.24230669704754, 4.9368953704833980);
            MKCoordinateSpan span = new MKCoordinateSpan(KilometresToLatitudeDegrees(2.5), KilometresToLongitudeDegrees(2.5, coords.Latitude));
            mapView.Region = new MKCoordinateRegion(coords, span);
            mapView.MapType = MKMapType.Standard;
            mapView.Delegate = new MapDelegate() { PolygonStyles = new Dictionary<IMKOverlay, string>() };
            ParseGeoJson();
            View = mapView;
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

        }

        public double KilometresToLatitudeDegrees(double km)
        {
            double EarthRadius = 6371.0;
            double radiansToDegrees = 180.0 / Math.PI;
            return (km / EarthRadius) * radiansToDegrees;
        }
        public double KilometresToLongitudeDegrees(double km, double atLatitude)
        {
            double EarthRadius = 6371.0;
            double degreesToRadians = Math.PI / 180.0;
            double radiansToDegrees = 180.0 / Math.PI;

            double radiusAtLatitude = EarthRadius * Math.Cos(atLatitude * degreesToRadians);

            return (km / radiusAtLatitude) * radiansToDegrees;
        }

        private void ParseGeoJson()
        {
            var geoJson = System.IO.File.ReadAllText("SharedAssets/map.geo.json");
            var geoJsonObject = JsonConvert.DeserializeObject<GeoJsonObject>(geoJson);
            foreach (var geoJsonFeature in geoJsonObject.features)
            {
                if (geoJsonFeature.geometry.type == "Polygon")
                {
                    var geometryList = JsonConvert.DeserializeObject<List<List<List<double>>>>(geoJsonFeature.geometry.coordinates.ToString());
                    Console.WriteLine(geometryList.Count + " polygon with " + geometryList[0].Count + " corners");
                    var polygonCorners = new CLLocationCoordinate2D[geometryList[0].Count];
                    var i = 0;
                    foreach (var corner in geometryList[0])
                    {
                        polygonCorners[i] = new CLLocationCoordinate2D(corner[1], corner[0]);
                        i++;
                    }

                    MKPolygon polygonOverlay = MKPolygon.FromCoordinates(polygonCorners);
                    (mapView.Delegate as MapDelegate).PolygonStyles.Add(polygonOverlay, geoJsonFeature.properties.style);

                    MKMapItem placemark = new MKMapItem(new MKPlacemark(polygonOverlay.Coordinate));

                    placemark.Name = geoJsonFeature.properties.name;
                    var annotation = new BasicMapAnnotation(new CLLocationCoordinate2D(polygonOverlay.Coordinate.Latitude, polygonOverlay.Coordinate.Longitude), geoJsonFeature.properties.name);
                    if (geoJsonFeature.properties.style == "kampeergrond")
                        annotation.AnnotationType = BasicMapAnnotation.AnnotationTypeEnum.Campground;
                    else
                        annotation.AnnotationType = BasicMapAnnotation.AnnotationTypeEnum.Region;
                    mapView.AddAnnotation(annotation);
                    mapView.AddOverlay(polygonOverlay);

                }
                else if (geoJsonFeature.geometry.type == "Point")
                {
                    var geometryList = JsonConvert.DeserializeObject<List<double>>(geoJsonFeature.geometry.coordinates.ToString());
                    var annotation = new BasicMapAnnotation(new CLLocationCoordinate2D(geometryList[1], geometryList[0]), geoJsonFeature.properties.name);
                    annotation.AnnotationType = BasicMapAnnotation.AnnotationTypeEnum.Point;
                    mapView.AddAnnotation(annotation);

                }
                else if (geoJsonFeature.geometry.type == "LineString")
                {
                    var geometryList = JsonConvert.DeserializeObject<List<List<double>>>(geoJsonFeature.geometry.coordinates.ToString());
                    var roadCorners = new CLLocationCoordinate2D[geometryList.Count];
                    var i = 0;
                    foreach (var corner in geometryList)
                    {
                        roadCorners[i] = new CLLocationCoordinate2D(corner[1], corner[0]);
                        i++;
                    }

                    MKPolyline roadOverlay = MKPolyline.FromCoordinates(roadCorners);
                    (mapView.Delegate as MapDelegate).PolygonStyles.Add(roadOverlay, geoJsonFeature.properties.style);

                    mapView.AddOverlay(roadOverlay);
                }
            }
        }
    }

    class GeoJsonObject
    {
        public string type { get; set; }
        public List<Feature> features
        {
            get;
            set;
        }
    }

    class Feature
    {
        public string type
        {
            get;
            set;
        }
        public FeatureProperty properties
        {
            get;
            set;
        }
        public FeatureGeometry geometry
        {
            get;
            set;
        }
    }

    class FeatureProperty
    {
        public string style
        {
            get;
            set;

        }
        public string name
        {
            get;
            set;
        }
    }
    class FeatureGeometry
    {
        public string type
        {
            get;
            set;

        }
        public object coordinates
        {
            get;
            set;
        }
    }

    class BasicMapAnnotation : MKAnnotation
    {
        CLLocationCoordinate2D coord;
        string title;
        public override CLLocationCoordinate2D Coordinate => coord;
        public AnnotationTypeEnum AnnotationType
        {
            get;
            set;
        }
        public override string Title
        {
            get
            {
                return title;
            }
        }
        public override void SetCoordinate(CLLocationCoordinate2D value)
        {
            coord = value;
        }


        public BasicMapAnnotation(CLLocationCoordinate2D coord, string title)
        {
            this.coord = coord;
            this.title = title;
        }

        public enum AnnotationTypeEnum
        {
            Point,
            Region,
            Campground
        }
    }

    class MapDelegate : MKMapViewDelegate
    {
        public Dictionary<IMKOverlay, string> PolygonStyles
        {
            get;
            set;
        }
        public MapDelegate()
        {
        }

        public MapDelegate(NSObjectFlag t) : base(t)
        {
        }

        public MapDelegate(IntPtr handle) : base(handle)
        {
        }
        public override MKOverlayRenderer OverlayRenderer(MKMapView mapView, IMKOverlay overlay)
        {
            UIColor fill = UIColor.Clear;
            UIColor border = UIColor.Clear;
            float borderWidth = 0;
            CGLineJoin lineJoin = CGLineJoin.Round;
            CGLineCap lineCap = CGLineCap.Round;
            float dashPhase = 0;
            string style;
            if (PolygonStyles.TryGetValue(overlay, out style))
            {
                switch (style)
                {
                    case "border":
                        fill = UIColor.FromRGB(0.99f, 0.94f, 0.91f);
                        border = UIColor.FromRGB(0.94f, 0.65f, 0.56f);
                        break;
                    case "podium":
                        fill = UIColor.FromRGB(0.94f, 0.49f, 0f);
                        break;
                    case "podiumgrond":
                        fill = UIColor.FromRGB(0f, 0.44f, 0.58f);
                        break;
                    case "pavilioen":
                        fill = UIColor.FromRGB(0.89f, 0.69f, 0.77f);
                        break;
                    case "loods":
                        fill = UIColor.FromRGB(0.85f, 0.89f, 0.51f);
                        break;
                    case "kampeergrond":
                        fill = UIColor.FromRGB(0.32f, 0.69f, 0.19f);
                        break;
                    case "kampeergrond-ongebruikt":
                        fill = UIColor.FromRGB(0.99f, 0.97f, 0.96f);
                        break;
                    case "aanbod":
                        fill = UIColor.FromRGB(0.85f, 0.05f, 0.15f);
                        break;
                    case "vijver":
                        fill = UIColor.FromRGBA(0.00f, 0.62f, 0.89f, 0.6f);
                        break;
                    case "bos":
                        fill = UIColor.FromRGB(0.49f, 0.13f, 0.43f);
                        border = UIColor.FromRGB(0.22f, 0.69f, 0.42f);
                        borderWidth = 1;
                        break;
                    case "weg-hard":
                        borderWidth = 4;
                        lineCap = CGLineCap.Square;
                        border = UIColor.White;
                        break;
                    case "weg-hard-2":
                        borderWidth = 3;
                        lineCap = CGLineCap.Square;
                        border = UIColor.White;
                        break;
                    case "weg-halfhard":
                        borderWidth = 3;
                        lineCap = CGLineCap.Square;
                        border = UIColor.White;
                        break;
                    case "weg-zand":
                        borderWidth = 1;
                        dashPhase = 0.2f;
                        border = UIColor.FromRGB(0.94f, 0.65f, 0.56f);
                        break;
                    case "faciliteit":
                        border = UIColor.FromRGB(0.05f, 0.46f, 0.58f);
                        break;
                    default:
                        fill = UIColor.Black;
                        break;
                }
            }
            if (overlay is MKPolygon)
                return new MKPolygonRenderer(overlay as MKPolygon) { FillColor = fill, StrokeColor = border, LineWidth = borderWidth, LineJoin = lineJoin };
            if (overlay is MKPolyline)
                return new MKPolylineRenderer(overlay as MKPolyline) { FillColor = fill, StrokeColor = border, LineWidth = borderWidth, LineCap = CGLineCap.Square, LineDashPhase = dashPhase };
            return null;

        }
        public override MKAnnotationView GetViewForAnnotation(MKMapView mapView, IMKAnnotation annotation)
        {

            MKAnnotationView annotationView = null;

            if (annotation is MKUserLocation)
                return null;

            if (annotation is BasicMapAnnotation)
            {
                var ann = annotation as BasicMapAnnotation;
                switch (ann.AnnotationType)
                {
                    case BasicMapAnnotation.AnnotationTypeEnum.Point:
                        annotationView = mapView.DequeueReusableAnnotation("iconAnnotation");

                        if (annotationView == null)
                        {
                            annotationView = new MKAnnotationView(annotation, "iconAnnotation");
                        }
                        else
                        {
                            annotationView.Annotation = annotation;
                        }
                        UIImage icon = null;
                        Console.WriteLine(((BasicMapAnnotation)annotation).Title);
                        switch (((BasicMapAnnotation)annotation).Title)
                        {
                            case "sanitair":
                                icon = UIImage.FromBundle("SharedAssets/Images/Map/sanitair.png");
                                break;
                                case "centrale bar":
								icon = UIImage.FromBundle("SharedAssets/Images/Map/bar.png");
								break;
                                case "afwasbatterij":
								icon = UIImage.FromBundle("SharedAssets/Images/Map/afwasbatterij.png");
								break;
							case "infopunt":
								icon = UIImage.FromBundle("SharedAssets/Images/Map/infopunt.png");
								break;
							case "evacuatiepunt":
								icon = UIImage.FromBundle("SharedAssets/Images/Map/evacuatiepunt.png");
								break;
							case "eten":
								icon = UIImage.FromBundle("SharedAssets/Images/Map/eten.png");
								break;
							case "SIS":
								icon = UIImage.FromBundle("SharedAssets/Images/Map/sis.png");
								break;
							case "EHBO":
								icon = UIImage.FromBundle("SharedAssets/Images/Map/ehbo.png");
								break;
                            default:
                                break;
                        }
                        if (icon != null){
							UIGraphics.BeginImageContext(new CGSize(12, 12));
							icon.Draw(new CGRect(0, 0, 12, 12));
							var resizedIcon = UIGraphics.GetImageFromCurrentImageContext();
							UIGraphics.EndImageContext();
							annotationView.Image = resizedIcon;
                        }
						

                        annotationView.CanShowCallout = true;
                        return annotationView;
                    case BasicMapAnnotation.AnnotationTypeEnum.Region:
                        // show conference annotation
                        annotationView = mapView.DequeueReusableAnnotation("textAnnotation");

                        if (annotationView == null)
                        {
                            annotationView = new MKAnnotationView(annotation, "textAnnotation");
                            var label = new UILabel();
                            label.Tag = 42;
                            label.Font = UIFont.SystemFontOfSize(8);
                            label.ShadowColor = UIColor.Black;
                            label.ShadowOffset = new CGSize(0, 1);
                            label.TextColor = UIColor.White;
                            label.TextAlignment = UITextAlignment.Center;
                            annotationView?.AddSubview(label);
                            annotationView.Frame = label.Frame;
                        }
                        else
                        {
                            annotationView.Annotation = annotation;
                        }

                        var lbl2 = annotationView?.ViewWithTag(42) as UILabel;
                        if (lbl2 != null)
                        {
                            lbl2.Text = ((BasicMapAnnotation)annotation).Title;
                            lbl2.SizeToFit();
                        }
                        annotationView.Image = null;
                        annotationView.CanShowCallout = false;
                        return annotationView;
                    case BasicMapAnnotation.AnnotationTypeEnum.Campground:
						// show conference annotation
						annotationView = mapView.DequeueReusableAnnotation("textAnnotation");

						if (annotationView == null)
						{
							annotationView = new MKAnnotationView(annotation, "textAnnotation");
                            var label = new UILabel()
                            {
                                Tag = 42,
                                Font = UIFont.SystemFontOfSize(8),
                                ShadowColor = UIColor.Black,
                                ShadowOffset = new CGSize(0, 1),
                                TextColor = UIColor.White,
                                TextAlignment = UITextAlignment.Center
                            };
                            annotationView?.AddSubview(label);
                            annotationView.Frame = label.Frame;
                        }
                        else
                        {
                            annotationView.Annotation = annotation;
                        }

                        var lbl3 = annotationView?.ViewWithTag(42) as UILabel;
                        if (lbl3 != null)
						{
							lbl3.Text = ((BasicMapAnnotation)annotation).Title;
							lbl3.SizeToFit();
						}


						var iconTent = UIImage.FromBundle("SharedAssets/Images/Map/tent.png");
						UIGraphics.BeginImageContext(new CGSize(40, 20));
						iconTent.Draw(new CGRect(0, 0, 20, 10));
						var resizedImage = UIGraphics.GetImageFromCurrentImageContext();
						UIGraphics.EndImageContext();
						annotationView.Image = resizedImage;
						annotationView.CanShowCallout = false;
						return annotationView;
                        break;
                }

            }
            return null;

        }



    }
}
